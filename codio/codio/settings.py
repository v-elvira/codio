"""
Django settings for codio project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
from configurations import Configuration
from configurations import values
import dj_database_url
from datetime import timedelta

class Dev(Configuration):

    # CACHES = {
    #     "default": {
    #         "BACKEND": "django.core.cache.backends.memcached.PyMemcacheCache",
    #         "LOCATION": "127.0.0.1:11211",
    #     }
    # }

    # CACHES = {
    #     "default": {
    #         "BACKEND": "django.core.cache.backends.db.DatabaseCache",
    #         "LOCATION": "my_cache_table",
    #     }
    # }


    # CACHES = {
    #     "default": {
    #         "BACKEND": "django.core.cache.backends.filebased.FileBasedCache",
    #         "LOCATION": "/var/tmp/django_cache", # dir, absolute path, must exist
    #     }
    # }

    # CACHES = {  #default cash, inside Python process' memory. Can't be shared across multiple Django instances
    #     "default": {
    #         "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
    #         "LOCATION": "unique-snowflake", # not required, only if multiple local-memory caches
    #     }
    # }

    # CACHES = { # doesn't actually cash
    #     "default": {
    #         "BACKEND": "django.core.cache.backends.dummy.DummyCache",
    #     }
    # }

    ADMINS = [("Elya", "elya_321@mail.ru"),]
    # ADMINS = SingleNestedTupleValue([("Elya", "elya_321@mail.ru"),])
    # env: DJANGO_ADMINS="Ben Shaw,ben@example.com;Leo Lucio,leo@example.com"

    # LOGGING = {
    #     "version": 1,
    #     "disable_existing_loggers": False,
    #     "filters": {
    #         "require_debug_false": {
    #             "()": "django.utils.log.RequireDebugFalse",
    #         },
    #     },
    #     "formatters": {
    #         "verbose": {
    #             "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
    #             "style": "{",
    #         },
    #     },
    #     "handlers": {
    #         "console": {
    #             "class": "logging.StreamHandler",
    #             "stream": "ext://sys.stdout",
    #             "formatter": "verbose",
    #         },
    #         "mail_admins": {
    #             "level": "ERROR",
    #             "class": "django.utils.log.AdminEmailHandler",
    #             # "filters": ["require_debug_false"],
    #         },
    #     },
    #     "loggers": {
    #         "django.request": {
    #             "handlers": ["mail_admins"],
    #             "level": "DEBUG", # "ERROR",
    #             "propagate": False,
    #         },
    #     },
    #     "root": {
    #         "handlers": ["console"],
    #         "level": "DEBUG",
    #     },
    # }

    LOGGING = {
        "version": 1,
        "disable_existing_loggers": False,
        "formatters": {
            "verbose": {
                "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
                "style": "{",
            },
        },
        "handlers": {
            "console": {
                "class": "logging.StreamHandler",
                "stream": "ext://sys.stdout",
                "formatter": "verbose",
            },
        },
        "root": {
            "handlers": ["console"],
            "level": "DEBUG",
        },
    }


    # LOGGING = {
    #     "version": 1,
    #     "disable_existing_loggers": False,
    #     "handlers": {
    #         "console": {"class": "logging.StreamHandler", "stream": "ext://sys.stdout"},
    #         # "file": {"class": "logging.FileHandler", "filename": "/home/elya/homeworks/codio/codio/codio.log"},
    #     },
    #     "root": {
    #         "handlers": ["console"],
    #         # "handlers": ["file"],
    #         "level": "DEBUG",
    #     }
    # }

    # Build paths inside the project like this: BASE_DIR / 'subdir'.
    BASE_DIR = Path(__file__).resolve().parent.parent


    # Quick-start development settings - unsuitable for production
    # See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

    # SECURITY WARNING: keep the secret key used in production secret!
    SECRET_KEY = 'django-insecure-_8##=&1g4&*k@r@vifn1t1rjck60t%1t_#3l#j5&*kij$fj894'

    # SECURITY WARNING: don't run with debug turned on in production!
    # DEBUG = True
    DEBUG = values.BooleanValue(True) # env: DJANGO_DEBUG "no", "n", "false", "0", "" => False

    # ALLOWED_HOSTS = []
    # ALLOWED_HOSTS = ['*']
    ALLOWED_HOSTS = values.ListValue(["localhost", "0.0.0.0", "127.0.0.1"]) # env: DJANGO_ALLOWED_HOSTS=localhost,0.0.0.0,.codio.io

    INTERNAL_IPS = ["127.0.0.1"]

    # Application definition

    INSTALLED_APPS = [
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.sites',
        'django.contrib.staticfiles',
        'blog',
        'crispy_forms', 
        'crispy_bootstrap5',
        'debug_toolbar',
        'codio_auth',
        'allauth',
        'allauth.account', 
        'allauth.socialaccount',
        'allauth.socialaccount.providers.google',
        'rest_framework',
        'rest_framework.authtoken',
        'drf_yasg',
        'django_filters',
    ]

    MIDDLEWARE = [
        'debug_toolbar.middleware.DebugToolbarMiddleware',
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
    ]

    ROOT_URLCONF = 'codio.urls'

    TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [BASE_DIR / 'templates'],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                ],
            },
        },
    ]

    WSGI_APPLICATION = 'codio.wsgi.application'


    # Database
    # https://docs.djangoproject.com/en/4.1/ref/settings/#databases

    # DATABASES = {
    #     'default': {
    #         'ENGINE': 'django.db.backends.sqlite3',
    #         'NAME': BASE_DIR / 'db.sqlite3',
    #     }
    # }
    DATABASES = values.DatabaseURLValue(f"sqlite:///{BASE_DIR}/db.sqlite3") # env: DATABASE_URL 
    #DATABASE_URL=sqlite:///db.sqlite3 python3 manage.py runserver 0.0.0.0:8000
    ## postgres://USER:PASSWORD@HOST:PORT/NAME,  sqlite:///PATH

    # DATABASES = {
    #     "default": dj_database_url.config(default=f"sqlite:///{BASE_DIR}/db.sqlite3"), # env: DATABASE_URL
    #     "alternative": dj_database_url.config(
    #         "ALTERNATIVE_DATABASE_URL",                                                # env: ALTERNATIVE_DATABASE_URL
    #         default=f"sqlite:///{BASE_DIR}/alternative_db.sqlite3",
    #     ),
    # }


    # Password validation
    # https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

    AUTH_PASSWORD_VALIDATORS = [
        {
            'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
        },
    ]


    PASSWORD_HASHERS = [
      'django.contrib.auth.hashers.Argon2PasswordHasher',
      'django.contrib.auth.hashers.PBKDF2PasswordHasher',
      'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
      'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
    ]

    # Internationalization
    # https://docs.djangoproject.com/en/4.1/topics/i18n/

    LANGUAGE_CODE = 'en-us'

    # TIME_ZONE = 'UTC'
    TIME_ZONE = values.Value("Europe/Moscow")                 # default checks for env: DJANGO_TIME_ZONE
    # TIME_ZONE = values.Value("UTC", environ_prefix="CODIO") # checks for env: CODIO_TIME_ZONE

    USE_I18N = True

    USE_TZ = True


    # Static files (CSS, JavaScript, Images)
    # https://docs.djangoproject.com/en/4.1/howto/static-files/

    STATIC_URL = 'static/'

    # Default primary key field type
    # https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

    DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

    # For crispy forms:
    CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
    CRISPY_TEMPLATE_PACK = "bootstrap5"

    # Auth
    AUTH_USER_MODEL = "codio_auth.User" # default is 'auth.User'

    # Two-step activation
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
    ACCOUNT_ACTIVATION_DAYS = 7
    # REGISTRATION_OPEN = False

    # Django Allauth Setup
    SITE_ID = 1
    # For custom User model without 'username':
    ACCOUNT_USER_MODEL_USERNAME_FIELD = None
    ACCOUNT_EMAIL_REQUIRED = True
    ACCOUNT_USERNAME_REQUIRED = False
    ACCOUNT_AUTHENTICATION_METHOD = "email"

    REST_FRAMEWORK = {
        "DEFAULT_AUTHENTICATION_CLASSES": [
            "rest_framework.authentication.BasicAuthentication",
            "rest_framework.authentication.SessionAuthentication",
            "rest_framework.authentication.TokenAuthentication",
            "rest_framework_simplejwt.authentication.JWTAuthentication",
        ], 
        "DEFAULT_PERMISSION_CLASSES": [
            # "rest_framework.permissions.IsAuthenticated", #default: AllowAny
            "rest_framework.permissions.IsAuthenticatedOrReadOnly",
        ],
        "DEFAULT_THROTTLE_CLASSES": [
            # "rest_framework.throttling.AnonRateThrottle", # defined in rest_framework.throttling 
            # "rest_framework.throttling.UserRateThrottle"  # defined in rest_framework.throttling

            "blog.api.throttling.AnonSustainedThrottle",    # our classes, inherit from above
            "blog.api.throttling.AnonBurstThrottle",
            "blog.api.throttling.UserSustainedThrottle",
            "blog.api.throttling.UserBurstThrottle",

        ],
        "DEFAULT_THROTTLE_RATES": {
            # "anon": "500/day",          # <n>/<period> (second, minute, hour, day)
            # "user": "2000/day",          # scope = 'anon' ('user') are defined attributes of classes AnonRateThrottle and UserRateThrottle 
            
            "anon_sustained": "500/day",    # scopes we defined in our classes, inherited from AnonRateThrottle and UserRateThrottle
            "anon_burst": "50/minute",
            "user_sustained": "5000/day",
            "user_burst": "100/minute",

            # "post_api": "50/minute",    # Scoped throttle (class ScopedRateThrottle), set in veiws. Independent from not scoped throttle, not counted in each other
        },
        
        "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination", # globally
        # "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
        # "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.CursorPagination", # default: try to sort by 'created' field (or error) 
        "PAGE_SIZE": 4,

        "DEFAULT_FILTER_BACKENDS": [
            "django_filters.rest_framework.DjangoFilterBackend",
            "rest_framework.filters.OrderingFilter" # for ordering. By default, all readable serialized fields will be available for ordering
        ],
    }

    SWAGGER_SETTINGS = {
        "SECURITY_DEFINITIONS": {
            "Token": {"type": "apiKey", "name": "Authorization", "in": "header"},
            "Basic": {"type": "basic"},
        }
    }

    SIMPLE_JWT = {
        "ACCESS_TOKEN_LIFETIME": timedelta(days=1),   # Default is timedelta(minutes=5)
        "REFRESH_TOKEN_LIFETIME": timedelta(days=7),  # Default is timedelta(days=1)
        # "SIGNING_KEY": "mykey"                        # Deafult is Django SECRET_KEY
    }



class Prod(Dev):
    DEBUG = False
    SECRET_KEY = values.SecretValue() # env: DJANGO_SECRET_KEY

